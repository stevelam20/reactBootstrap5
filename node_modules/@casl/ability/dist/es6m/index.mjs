import{createFactory as t,$eq as e,$ne as i,$lt as s,$lte as n,$gt as r,$gte as o,$in as c,$nin as u,$all as h,$size as l,$regex as a,$options as f,$elemMatch as d,$exists as p,eq as b,ne as y,lt as w,lte as g,gt as $,gte as m,within as A,nin as E,all as M,size as j,regex as x,elemMatch as v,exists as F,and as _}from"@ucast/mongo2js";function O(t){return Array.isArray(t)?t:[t]}const R="__caslSubjectType__";function C(t,e){if(e)if(!e.hasOwnProperty(R))Object.defineProperty(e,R,{value:t});else if(t!==e[R])throw new Error(`Trying to cast object to subject type ${t} but previously it was casted to ${e[R]}`);return e}const T=t=>{const e=typeof t;return"string"===e||"function"===e};const B=t=>t.modelName||t.name;const P=t=>"string"===typeof t?t:B(t);function S(t){if(!t)return"all";if(t.hasOwnProperty(R))return t[R];return B(t.constructor)}function q(t,e){let i=O(e);let s=0;while(s<i.length){const e=i[s++];if(t.hasOwnProperty(e))i=i.concat(t[e])}return i}function z(t){if(t.manage)throw new Error('Cannot add alias for "manage" action because it is reserved');Object.keys(t).forEach((e=>{const i=e===t[e]||Array.isArray(t[e])&&(-1!==t[e].indexOf(e)||-1!==t[e].indexOf("manage"));if(i)throw new Error(`Attempt to alias action to itself: ${e} -> ${t[e]}`)}))}function Y(t){if("production"!==process.env.NODE_ENV)z(t);return e=>q(t,e)}function D(t,e,i){for(let s=i;s<e.length;s++)t.push(e[s])}function I(t,e){if(!t||!t.length)return e||[];if(!e||!e.length)return t||[];let i=0;let s=0;const n=[];while(i<t.length&&s<e.length)if(t[i].priority<e[s].priority){n.push(t[i]);i++}else{n.push(e[s]);s++}D(n,t,i);D(n,e,s);return n}function L(t,e,i){let s=t.get(e);if(!s){s=i();t.set(e,s)}return s}const U=t=>t;function k(t,e){if(Array.isArray(t.fields)&&!t.fields.length)throw new Error("`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa");if(t.fields&&!e.fieldMatcher)throw new Error('You need to pass "fieldMatcher" option in order to restrict access by fields');if(t.conditions&&!e.conditionsMatcher)throw new Error('You need to pass "conditionsMatcher" option in order to restrict access by conditions')}class G{constructor(t,e,i=0){k(t,e);this.action=e.resolveAction(t.action);this.subject=t.subject;this.inverted=!!t.inverted;this.conditions=t.conditions;this.reason=t.reason;this.fields=t.fields?O(t.fields):void 0;this.priority=i;this.t=e}i(){if(this.conditions&&!this.o)this.o=this.t.conditionsMatcher(this.conditions);return this.o}get ast(){const t=this.i();return t?t.ast:void 0}matchesConditions(t){if(!this.conditions)return true;if(!t||T(t))return!this.inverted;const e=this.i();return e(t)}matchesField(t){if(!this.fields)return true;if(!t)return!this.inverted;if(this.fields&&!this.u)this.u=this.t.fieldMatcher(this.fields);return this.u(t)}}const H=(t,e)=>{const i={value:t,prev:e,next:null};if(e)e.next=i;return i};const J=t=>{if(t.next)t.next.prev=t.prev;if(t.prev)t.prev.next=t.next;t.next=t.prev=null};const K=()=>({rules:[],merged:false});const N=()=>new Map;const Q=(t,e)=>{if(!t.h&&e.fields)t.h=true};class V{constructor(t=[],e={}){this.h=false;this.l=new Map;this.p={conditionsMatcher:e.conditionsMatcher,fieldMatcher:e.fieldMatcher,resolveAction:e.resolveAction||U};this.g=e.detectSubjectType||S;this.$=t;this.m=this.A(t)}get rules(){return this.$}detectSubjectType(t){return T(t)?t:this.g(t)}update(t){const e={rules:t,ability:this,target:this};this.M("update",e);this.$=t;this.m=this.A(t);this.M("updated",e);return this}A(t){const e=new Map;for(let i=t.length-1;i>=0;i--){const s=t.length-i-1;const n=new G(t[i],this.p,s);const r=O(n.action);const o=O(n.subject||"all");Q(this,n);for(let t=0;t<o.length;t++){const i=L(e,o[t],N);for(let t=0;t<r.length;t++)L(i,r[t],K).rules.push(n)}}return e}possibleRulesFor(t,e="all"){if(!T(e))throw new Error('"possibleRulesFor" accepts only subject types (i.e., string or class) as the 2nd parameter');const i=L(this.m,e,N);const s=L(i,t,K);if(s.merged)return s.rules;const n="manage"!==t&&i.has("manage")?i.get("manage").rules:void 0;let r=I(s.rules,n);if("all"!==e)r=I(r,this.possibleRulesFor(t,"all"));s.rules=r;s.merged=true;return r}rulesFor(t,e,i){const s=this.possibleRulesFor(t,e);if(i&&"string"!==typeof i)throw new Error("The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details");if(!this.h)return s;return s.filter((t=>t.matchesField(i)))}on(t,e){const i=this.l.get(t)||null;const s=H(e,i);this.l.set(t,s);return()=>{if(!s.next&&!s.prev&&this.l.get(t)===s)this.l.delete(t);else J(s)}}M(t,e){let i=this.l.get(t)||null;while(null!==i){const t=i.prev;i.value(e);i=t}}}class PureAbility extends V{can(...t){const e=this.relevantRuleFor(...t);return!!e&&!e.inverted}relevantRuleFor(t,e,i){const s=this.detectSubjectType(e);const n=this.rulesFor(t,s,i);for(let t=0,i=n.length;t<i;t++)if(n[t].matchesConditions(e))return n[t];return null}cannot(...t){return!this.can(...t)}}const W={$eq:e,$ne:i,$lt:s,$lte:n,$gt:r,$gte:o,$in:c,$nin:u,$all:h,$size:l,$regex:a,$options:f,$elemMatch:d,$exists:p};const X={eq:b,ne:y,lt:w,lte:g,gt:$,gte:m,in:A,nin:E,all:M,size:j,regex:x,elemMatch:v,exists:F,and:_};const Z=(e,i,s)=>t(Object.assign({},W,e),Object.assign({},X,i),s);const tt=t(W,X);const et=/[-/\\^$+?.()|[\]{}]/g;const it=/\.?\*+\.?/g;const st=/\*+/;const nt=/\./g;function rt(t,e,i){const s="*"===i[0]||"."===t[0]&&"."===t[t.length-1]?"+":"*";const n=-1===t.indexOf("**")?"[^.]":".";const r=t.replace(nt,"\\$&").replace(st,n+s);return e+t.length===i.length?`(?:${r})?`:r}function ot(t,e,i){if("."===t&&("*"===i[e-1]||"*"===i[e+1]))return t;return`\\${t}`}function ct(t){const e=t.map((t=>t.replace(et,ot).replace(it,rt)));const i=e.length>1?`(?:${e.join("|")})`:e[0];return new RegExp(`^${i}$`)}const ut=t=>{let e;return i=>{if("undefined"===typeof e)e=t.every((t=>-1===t.indexOf("*")))?null:ct(t);return null===e?-1!==t.indexOf(i):e.test(i)}};class Ability extends PureAbility{constructor(t=[],e={}){super(t,Object.assign({conditionsMatcher:tt,fieldMatcher:ut},e))}}class ht{constructor(t){this.j=t}because(t){this.j.reason=t;return this}}class AbilityBuilder{constructor(t){this.rules=[];this.v=t;this.can=this.can.bind(this);this.cannot=this.cannot.bind(this);this.build=this.build.bind(this)}can(t,e,i,s){const n={action:t};if(e){n.subject=e;if(Array.isArray(i)||"string"===typeof i)n.fields=i;else if("undefined"!==typeof i)n.conditions=i;if("undefined"!==typeof s)n.conditions=s}this.rules.push(n);return new ht(n)}cannot(t,e,i,s){const n=this.can(t,e,i,s);n.j.inverted=true;return n}build(t){return new this.v(this.rules,t)}}function defineAbility(t,e){const i=new AbilityBuilder(Ability);const s=t(i.can,i.cannot);if(s&&"function"===typeof s.then)return s.then((()=>i.build(e)));return i.build(e)}const lt=t=>`Cannot execute "${t.action}" on "${t.subjectType}"`;const at=function t(e){this.message=e};at.prototype=Object.create(Error.prototype);class ForbiddenError extends at{static setDefaultMessage(t){this.F="string"===typeof t?()=>t:t}static from(t){return new this(t)}constructor(t){super("");this.ability=t;if("function"===typeof Error.captureStackTrace){this.name="ForbiddenError";Error.captureStackTrace(this,this.constructor)}}setMessage(t){this.message=t;return this}throwUnlessCan(...t){const e=this.ability.relevantRuleFor(...t);if(e&&!e.inverted)return;this.action=t[0];this.subject=t[1];this.subjectType=P(this.ability.detectSubjectType(t[1]));this.field=t[2];const i=e?e.reason:"";this.message=this.message||i||this.constructor.F(this);throw this}}ForbiddenError.F=lt;export{Ability,AbilityBuilder,ForbiddenError,PureAbility,Z as buildMongoQueryMatcher,Y as createAliasResolver,defineAbility,S as detectSubjectType,ut as fieldPatternMatcher,lt as getDefaultErrorMessage,tt as mongoQueryMatcher,C as subject,O as wrapArray};
//# sourceMappingURL=index.mjs.map
