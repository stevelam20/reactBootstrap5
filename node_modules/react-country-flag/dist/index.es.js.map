{"version":3,"file":"index.es.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst DEFAULT_CDN_URL =\n    'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/'\nconst DEFAULT_CDN_SUFFIX = 'svg'\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397\n\nfunction ReactCountryFlag({\n    cdnSuffix,\n    cdnUrl,\n    countryCode,\n    style,\n    svg,\n    ...props\n}) {\n    if (typeof countryCode !== 'string') {\n        return null\n    }\n\n    if (svg) {\n        const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${DEFAULT_CDN_SUFFIX}`\n\n        return (\n            <img\n                {...props}\n                src={flagUrl}\n                style={{\n                    display: 'inline-block',\n                    width: '1em',\n                    height: '1em',\n                    verticalAlign: 'middle',\n                    ...style\n                }}\n            />\n        )\n    }\n\n    const emoji = countryCode\n        .toUpperCase()\n        .replace(/./g, (char) =>\n            String.fromCodePoint(char.charCodeAt(0) + OFFSET)\n        )\n\n    return (\n        <span\n            role=\"img\"\n            {...props}\n            style={{\n                display: 'inline-block',\n                fontSize: '1em',\n                lineHeight: '1em',\n                verticalAlign: 'middle',\n                ...style\n            }}\n        >\n            {emoji}\n        </span>\n    )\n}\n\nReactCountryFlag.propTypes = {\n    cdnUrl: PropTypes.string,\n    countryCode: PropTypes.string.isRequired,\n    style: PropTypes.object,\n    svg: PropTypes.bool\n}\n\nReactCountryFlag.defaultProps = {\n    cdnUrl: DEFAULT_CDN_URL,\n    svg: false\n}\n\nexport default ReactCountryFlag\n"],"names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","props","flagUrl","toLowerCase","emoji","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","propTypes","PropTypes","string","isRequired","object","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,kBACF,uEADJ;AAEA,IAAMC,qBAAqB,KAA3B;;;AAGA,IAAMC,SAAS,MAAf;;AAEA,SAASC,gBAAT,OAOG;QANCC,SAMD,QANCA,SAMD;QALCC,MAKD,QALCA,MAKD;QAJCC,WAID,QAJCA,WAID;QAHCC,KAGD,QAHCA,KAGD;QAFCC,GAED,QAFCA,GAED;QADIC,KACJ;;QACK,OAAOH,WAAP,KAAuB,QAA3B,EAAqC;eAC1B,IAAP;;;QAGAE,GAAJ,EAAS;YACCE,eAAaL,MAAb,GAAsBC,YAAYK,WAAZ,EAAtB,SAAmDV,kBAAzD;;eAGI,wCACQQ,KADR;iBAESC,OAFT;;yBAIiB,cADb;uBAEW,KAFX;wBAGY,KAHZ;+BAImB;eACZH,KALP;WAJR;;;QAeEK,QAAQN,YACTO,WADS,GAETC,OAFS,CAED,IAFC,EAEK,UAACC,IAAD;eACXC,OAAOC,aAAP,CAAqBF,KAAKG,UAAL,CAAgB,CAAhB,IAAqBhB,MAA1C,CADW;KAFL,CAAd;;WAOI;;;kBACS;WACDO,KAFR;;yBAIiB,cADb;0BAEc,KAFd;4BAGgB,KAHhB;+BAImB;eACZF,KALP;;;KAJR;;;AAiBJJ,iBAAiBgB,SAAjB,GAA6B;YACjBC,UAAUC,MADO;iBAEZD,UAAUC,MAAV,CAAiBC,UAFL;WAGlBF,UAAUG,MAHQ;SAIpBH,UAAUI;CAJnB;;AAOArB,iBAAiBsB,YAAjB,GAAgC;YACpBzB,eADoB;SAEvB;CAFT;;;;"}