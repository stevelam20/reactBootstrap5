{"ast":null,"code":"// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // ** Axios Imports\n\nimport axios from 'axios';\nexport const getTasks = createAsyncThunk('appTodo/getTasks', async params => {\n  const response = await axios.get('/apps/todo/tasks', {\n    params\n  });\n  return {\n    params,\n    data: response.data\n  };\n});\nexport const addTask = createAsyncThunk('appTodo/addTask', async (task, _ref) => {\n  let {\n    dispatch,\n    getState\n  } = _ref;\n  const response = await axios.post('/apps/todo/add-tasks', {\n    task\n  });\n  await dispatch(getTasks(getState().todo.params));\n  return response.data;\n});\nexport const updateTask = createAsyncThunk('appTodo/updateTask', async (task, _ref2) => {\n  let {\n    dispatch,\n    getState\n  } = _ref2;\n  const response = await axios.post('/apps/todo/update-task', {\n    task\n  });\n  await dispatch(getTasks(getState().todo.params));\n  return response.data;\n});\nexport const deleteTask = createAsyncThunk('appTodo/deleteTask', async (taskId, _ref3) => {\n  let {\n    dispatch,\n    getState\n  } = _ref3;\n  const response = await axios.delete('/apps/todo/delete-task', {\n    taskId\n  });\n  await dispatch(getTasks(getState().todo.params));\n  return response.data;\n});\nexport const appTodoSlice = createSlice({\n  name: 'appTodo',\n  initialState: {\n    tasks: [],\n    selectedTask: {},\n    params: {\n      filter: '',\n      q: '',\n      sort: '',\n      tag: ''\n    }\n  },\n  reducers: {\n    reOrderTasks: (state, action) => {\n      state.tasks = action.payload;\n    },\n    selectTask: (state, action) => {\n      state.selectedTask = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getTasks.fulfilled, (state, action) => {\n      state.tasks = action.payload.data;\n      state.params = action.payload.params;\n    });\n  }\n});\nexport const {\n  reOrderTasks,\n  selectTask\n} = appTodoSlice.actions;\nexport default appTodoSlice.reducer;","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/views/apps/todo/store/index.js"],"names":["createSlice","createAsyncThunk","axios","getTasks","params","response","get","data","addTask","task","dispatch","getState","post","todo","updateTask","deleteTask","taskId","delete","appTodoSlice","name","initialState","tasks","selectedTask","filter","q","sort","tag","reducers","reOrderTasks","state","action","payload","selectTask","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from 'axios'\n\nexport const getTasks = createAsyncThunk('appTodo/getTasks', async params => {\n  const response = await axios.get('/apps/todo/tasks', { params })\n\n  return {\n    params,\n    data: response.data\n  }\n})\n\nexport const addTask = createAsyncThunk('appTodo/addTask', async (task, { dispatch, getState }) => {\n  const response = await axios.post('/apps/todo/add-tasks', { task })\n  await dispatch(getTasks(getState().todo.params))\n  return response.data\n})\n\nexport const updateTask = createAsyncThunk('appTodo/updateTask', async (task, { dispatch, getState }) => {\n  const response = await axios.post('/apps/todo/update-task', { task })\n  await dispatch(getTasks(getState().todo.params))\n  return response.data\n})\n\nexport const deleteTask = createAsyncThunk('appTodo/deleteTask', async (taskId, { dispatch, getState }) => {\n  const response = await axios.delete('/apps/todo/delete-task', { taskId })\n  await dispatch(getTasks(getState().todo.params))\n  return response.data\n})\n\nexport const appTodoSlice = createSlice({\n  name: 'appTodo',\n  initialState: {\n    tasks: [],\n    selectedTask: {},\n    params: {\n      filter: '',\n      q: '',\n      sort: '',\n      tag: ''\n    }\n  },\n  reducers: {\n    reOrderTasks: (state, action) => {\n      state.tasks = action.payload\n    },\n    selectTask: (state, action) => {\n      state.selectedTask = action.payload\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getTasks.fulfilled, (state, action) => {\n      state.tasks = action.payload.data\n      state.params = action.payload.params\n    })\n  }\n})\n\nexport const { reOrderTasks, selectTask } = appTodoSlice.actions\n\nexport default appTodoSlice.reducer\n"]},"metadata":{},"sourceType":"module"}