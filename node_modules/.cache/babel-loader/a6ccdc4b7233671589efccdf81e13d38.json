{"ast":null,"code":"// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // ** Axios Imports\n\nimport axios from 'axios';\nexport const getMails = createAsyncThunk('appEmail/getMails', async params => {\n  const response = await axios.get('/apps/email/emails', {\n    params\n  });\n  return {\n    params,\n    data: response.data\n  };\n});\nexport const updateMails = createAsyncThunk('appEmail/updateMails', async (_ref, _ref2) => {\n  let {\n    emailIds,\n    dataToUpdate\n  } = _ref;\n  let {\n    dispatch,\n    getState\n  } = _ref2;\n  const response = await axios.post('/apps/email/update-emails', {\n    emailIds,\n    dataToUpdate\n  });\n  await dispatch(getMails(getState().email.params));\n  return {\n    emailIds,\n    dataToUpdate,\n    data: response.data\n  };\n});\nexport const updateMailLabel = createAsyncThunk('appEmail/updateMailLabel', async (_ref3, _ref4) => {\n  let {\n    emailIds,\n    label\n  } = _ref3;\n  let {\n    dispatch,\n    getState\n  } = _ref4;\n  const response = await axios.post('/apps/email/update-emails-label', {\n    emailIds,\n    label\n  });\n  await dispatch(getMails(getState().email.params));\n  return response.data;\n});\nexport const paginateMail = createAsyncThunk('appEmail/paginateMail', async _ref5 => {\n  let {\n    dir,\n    emailId\n  } = _ref5;\n  const response = await axios.get('/apps/email/paginate-email', {\n    params: {\n      dir,\n      emailId\n    }\n  });\n  return response.data;\n});\nexport const selectCurrentMail = createAsyncThunk('appEmail/selectCurrentMail', async id => {\n  const response = await axios.get('/apps/email/get-email', {\n    id\n  });\n  return response.data;\n});\nexport const appEmailSlice = createSlice({\n  name: 'appEmail',\n  initialState: {\n    mails: [],\n    params: {},\n    emailsMeta: {},\n    selectedMails: [],\n    currentMail: null\n  },\n  reducers: {\n    selectMail: (state, action) => {\n      const selectedMails = state.selectedMails;\n\n      if (!selectedMails.includes(action.payload)) {\n        selectedMails.push(action.payload);\n      } else {\n        selectedMails.splice(selectedMails.indexOf(action.payload), 1);\n      }\n\n      state.selectedMails = selectedMails;\n    },\n    selectAllMail: (state, action) => {\n      const selectAllMailsArr = [];\n\n      if (action.payload) {\n        selectAllMailsArr.length = 0;\n        state.mails.forEach(mail => selectAllMailsArr.push(mail.id));\n      } else {\n        selectAllMailsArr.length = 0;\n      }\n\n      state.selectedMails = selectAllMailsArr;\n    },\n    resetSelectedMail: state => {\n      state.selectedMails = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getMails.fulfilled, (state, action) => {\n      let currMail = null;\n\n      if (state.currentMail !== null && state.currentMail !== undefined) {\n        currMail = action.payload.data.emails.find(i => i.id === state.currentMail.id);\n      }\n\n      state.currentMail = currMail;\n      state.params = action.payload.params;\n      state.mails = action.payload.data.emails;\n      state.emailsMeta = action.payload.data.emailsMeta;\n    }).addCase(updateMails.fulfilled, (state, action) => {\n      function updateMailData(email) {\n        Object.assign(email, action.payload.dataToUpdate);\n      }\n\n      state.mails.forEach(email => {\n        if (action.payload.emailIds.includes(email.id)) {\n          updateMailData(email);\n        }\n      });\n    }).addCase(paginateMail.fulfilled, (state, action) => {\n      const data = action.payload;\n      const dataIndex = state.mails.findIndex(i => i.id === data.id);\n      dataIndex === 0 ? data.hasPreviousMail = false : data.hasPreviousMail = true;\n      dataIndex === state.mails.length - 1 ? data.hasNextMail = false : data.hasNextMail = true;\n      state.currentMail = data;\n    }).addCase(selectCurrentMail.fulfilled, (state, action) => {\n      state.currentMail = action.payload;\n    });\n  }\n});\nexport const {\n  selectMail,\n  selectAllMail,\n  resetSelectedMail\n} = appEmailSlice.actions;\nexport default appEmailSlice.reducer;","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/views/apps/email/store/index.js"],"names":["createSlice","createAsyncThunk","axios","getMails","params","response","get","data","updateMails","emailIds","dataToUpdate","dispatch","getState","post","email","updateMailLabel","label","paginateMail","dir","emailId","selectCurrentMail","id","appEmailSlice","name","initialState","mails","emailsMeta","selectedMails","currentMail","reducers","selectMail","state","action","includes","payload","push","splice","indexOf","selectAllMail","selectAllMailsArr","length","forEach","mail","resetSelectedMail","extraReducers","builder","addCase","fulfilled","currMail","undefined","emails","find","i","updateMailData","Object","assign","dataIndex","findIndex","hasPreviousMail","hasNextMail","actions","reducer"],"mappings":"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","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from 'axios'\n\nexport const getMails = createAsyncThunk('appEmail/getMails', async params => {\n  const response = await axios.get('/apps/email/emails', { params })\n  return {\n    params,\n    data: response.data\n  }\n})\n\nexport const updateMails = createAsyncThunk(\n  'appEmail/updateMails',\n  async ({ emailIds, dataToUpdate }, { dispatch, getState }) => {\n    const response = await axios.post('/apps/email/update-emails', { emailIds, dataToUpdate })\n    await dispatch(getMails(getState().email.params))\n    return {\n      emailIds,\n      dataToUpdate,\n      data: response.data\n    }\n  }\n)\n\nexport const updateMailLabel = createAsyncThunk(\n  'appEmail/updateMailLabel',\n  async ({ emailIds, label }, { dispatch, getState }) => {\n    const response = await axios.post('/apps/email/update-emails-label', { emailIds, label })\n    await dispatch(getMails(getState().email.params))\n    return response.data\n  }\n)\n\nexport const paginateMail = createAsyncThunk('appEmail/paginateMail', async ({ dir, emailId }) => {\n  const response = await axios.get('/apps/email/paginate-email', { params: { dir, emailId } })\n  return response.data\n})\n\nexport const selectCurrentMail = createAsyncThunk('appEmail/selectCurrentMail', async id => {\n  const response = await axios.get('/apps/email/get-email', { id })\n  return response.data\n})\n\nexport const appEmailSlice = createSlice({\n  name: 'appEmail',\n  initialState: {\n    mails: [],\n    params: {},\n    emailsMeta: {},\n    selectedMails: [],\n    currentMail: null\n  },\n  reducers: {\n    selectMail: (state, action) => {\n      const selectedMails = state.selectedMails\n      if (!selectedMails.includes(action.payload)) {\n        selectedMails.push(action.payload)\n      } else {\n        selectedMails.splice(selectedMails.indexOf(action.payload), 1)\n      }\n      state.selectedMails = selectedMails\n    },\n    selectAllMail: (state, action) => {\n      const selectAllMailsArr = []\n      if (action.payload) {\n        selectAllMailsArr.length = 0\n        state.mails.forEach(mail => selectAllMailsArr.push(mail.id))\n      } else {\n        selectAllMailsArr.length = 0\n      }\n      state.selectedMails = selectAllMailsArr\n    },\n    resetSelectedMail: state => {\n      state.selectedMails = []\n    }\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(getMails.fulfilled, (state, action) => {\n        let currMail = null\n        if (state.currentMail !== null && state.currentMail !== undefined) {\n          currMail = action.payload.data.emails.find(i => i.id === state.currentMail.id)\n        }\n        state.currentMail = currMail\n        state.params = action.payload.params\n        state.mails = action.payload.data.emails\n        state.emailsMeta = action.payload.data.emailsMeta\n      })\n      .addCase(updateMails.fulfilled, (state, action) => {\n        function updateMailData(email) {\n          Object.assign(email, action.payload.dataToUpdate)\n        }\n        state.mails.forEach(email => {\n          if (action.payload.emailIds.includes(email.id)) {\n            updateMailData(email)\n          }\n        })\n      })\n      .addCase(paginateMail.fulfilled, (state, action) => {\n        const data = action.payload\n        const dataIndex = state.mails.findIndex(i => i.id === data.id)\n        dataIndex === 0 ? (data.hasPreviousMail = false) : (data.hasPreviousMail = true)\n        dataIndex === state.mails.length - 1 ? (data.hasNextMail = false) : (data.hasNextMail = true)\n        state.currentMail = data\n      })\n      .addCase(selectCurrentMail.fulfilled, (state, action) => {\n        state.currentMail = action.payload\n      })\n  }\n})\n\nexport const { selectMail, selectAllMail, resetSelectedMail } = appEmailSlice.actions\n\nexport default appEmailSlice.reducer\n"]},"metadata":{},"sourceType":"module"}