{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STEVEDESKTOP\\\\Desktop\\\\themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template\\\\vuexy-admin-v8.1.0\\\\react-version\\\\Bootstrap5\\\\full-version\\\\full-version\\\\src\\\\@core\\\\components\\\\ripple-button\\\\index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { useState, useEffect } from 'react'; // ** Third Party Components\n\nimport classnames from 'classnames'; // ** Reactstrap Imports\n\nimport { Button } from 'reactstrap'; // ** Styles\n\nimport './ripple-button.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RippleButton = _ref => {\n  _s();\n\n  let {\n    className,\n    children,\n    onClick,\n    ...rest\n  } = _ref;\n  // ** States\n  const [mounted, setMounted] = useState(false);\n  const [isRippling, setIsRippling] = useState(false);\n  const [coords, setCoords] = useState({\n    x: -1,\n    y: -1\n  }); // ** Toggle mounted on mount & unmount\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []); // ** Check for coords and set ripple\n\n  useEffect(() => {\n    if (mounted) {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true);\n        setTimeout(() => setIsRippling(false), 500);\n      } else {\n        setIsRippling(false);\n      }\n    }\n  }, [coords]); // ** Reset Coords on ripple end\n\n  useEffect(() => {\n    if (mounted) {\n      if (!isRippling) setCoords({\n        x: -1,\n        y: -1\n      });\n    }\n  }, [isRippling]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: classnames('waves-effect', {\n      [className]: className\n    }),\n    onClick: e => {\n      const rect = e.target.getBoundingClientRect();\n      setCoords({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      });\n\n      if (onClick) {\n        onClick(e);\n      }\n    },\n    ...rest,\n    children: [children, isRippling ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"waves-ripple\",\n      style: {\n        left: coords.x,\n        top: coords.y\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}; // ** PropTypes\n\n\n_s(RippleButton, \"qCltj9y2lZHuWdOpy5TOEEQ4YnU=\");\n\n_c = RippleButton;\nRippleButton.propTypes = { ...Button.propTypes\n};\nButton.Ripple = RippleButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RippleButton\");","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/@core/components/ripple-button/index.js"],"names":["useState","useEffect","classnames","Button","RippleButton","className","children","onClick","rest","mounted","setMounted","isRippling","setIsRippling","coords","setCoords","x","y","setTimeout","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","propTypes","Ripple"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Button } from 'reactstrap'\n\n// ** Styles\nimport './ripple-button.scss'\n\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\n  // ** States\n  const [mounted, setMounted] = useState(false)\n  const [isRippling, setIsRippling] = useState(false)\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\n\n  // ** Toggle mounted on mount & unmount\n  useEffect(() => {\n    setMounted(true)\n    return () => setMounted(false)\n  }, [])\n\n  // ** Check for coords and set ripple\n  useEffect(() => {\n    if (mounted) {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true)\n        setTimeout(() => setIsRippling(false), 500)\n      } else {\n        setIsRippling(false)\n      }\n    }\n  }, [coords])\n\n  // ** Reset Coords on ripple end\n  useEffect(() => {\n    if (mounted) {\n      if (!isRippling) setCoords({ x: -1, y: -1 })\n    }\n  }, [isRippling])\n\n  return (\n    <Button\n      className={classnames('waves-effect', {\n        [className]: className\n      })}\n      onClick={e => {\n        const rect = e.target.getBoundingClientRect()\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\n        if (onClick) {\n          onClick(e)\n        }\n      }}\n      {...rest}\n    >\n      {children}\n      {isRippling ? (\n        <span\n          className='waves-ripple'\n          style={{\n            left: coords.x,\n            top: coords.y\n          }}\n        ></span>\n      ) : null}\n    </Button>\n  )\n}\n\n// ** PropTypes\nRippleButton.propTypes = {\n  ...Button.propTypes\n}\n\nButton.Ripple = RippleButton\n"]},"metadata":{},"sourceType":"module"}