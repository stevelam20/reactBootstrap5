{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STEVEDESKTOP\\\\Desktop\\\\themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template\\\\vuexy-admin-v8.1.0\\\\react-version\\\\Bootstrap5\\\\full-version\\\\full-version\\\\src\\\\@core\\\\components\\\\card-actions\\\\index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UiLoader from '@components/ui-loader';\nimport { ChevronDown, RotateCw, X } from 'react-feather'; // ** Reactstrap Imports\n\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardActions = props => {\n  _s();\n\n  // ** Props\n  const {\n    title,\n    actions,\n    children,\n    collapseIcon,\n    reloadIcon,\n    removeIcon,\n    endReload\n  } = props; // ** States\n\n  const [reload, setReload] = useState(false);\n  const [collapse, setCollapse] = useState(true);\n  const [visibility, setVisibility] = useState(true);\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }; // ** Action to call\n\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse);\n\n      case 'remove':\n        return setVisibility(false);\n\n      case 'reload':\n        return setReload(true);\n\n      default:\n    }\n  }; // ** Renders card actions\n\n\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          className: classnames('cursor-pointer', {\n            'me-50': i < actions.length - 1\n          }),\n          size: 15,\n          onClick: () => callAction(action)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const Tag = Icons[actions];\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        className: \"cursor-pointer\",\n        size: 15,\n        onClick: () => callAction(actions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n    }\n  }; // ** Ends reload\n\n\n  const removeReload = () => {\n    setReload(false);\n  }; // ** If user passes endReload function call it.\n\n\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload);\n    }\n  }); // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment; // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment;\n  return /*#__PURE__*/_jsxDEV(BlockUiWrapper\n  /*eslint-disable */\n  , { ...(actions === 'reload' || actions.includes('reload') ? {\n      blocking: reload\n    } : {}),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classnames('card-action', {\n        'd-none': !visibility\n      }),\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h4\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-icons\",\n          children: renderIcons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CollapseWrapper, { ...(actions === 'collapse' || actions.includes('collapse') ? {\n          isOpen: collapse\n        } : {}),\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardActions, \"H34FB3UQW6V15UpRvUt3rdzmeXw=\");\n\n_c = CardActions;\nexport default CardActions; // ** PropTypes\n\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (props['actions'] === 'reload' && props['endReload'] === undefined || props['actions'].includes('reload') && props['endReload'] === undefined) {\n      return new Error('Please provide a function to end reload!');\n    }\n  }\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CardActions\");","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/@core/components/card-actions/index.js"],"names":["Fragment","useState","useEffect","PropTypes","classnames","UiLoader","ChevronDown","RotateCw","X","Card","CardHeader","CardTitle","Collapse","CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","remove","callAction","action","renderIcons","Array","isArray","map","i","Tag","length","removeReload","CollapseWrapper","includes","BlockUiWrapper","blocking","isOpen","propTypes","any","string","isRequired","oneOfType","arrayOf","undefined","Error"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}