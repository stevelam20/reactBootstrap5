{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STEVEDESKTOP\\\\Desktop\\\\themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template\\\\vuexy-admin-v8.1.0\\\\react-version\\\\Bootstrap5\\\\full-version\\\\full-version\\\\src\\\\@core\\\\components\\\\input-password-toggle\\\\index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Eye, EyeOff } from 'react-feather'; // ** Reactstrap Imports\n\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPasswordToggle = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props; // ** State\n\n  const [inputVisibility, setInputVisibility] = useState(visible); // ** Renders Icon Based On Visibility\n\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14;\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : /*#__PURE__*/_jsxDEV(Eye, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 36\n      }, this);\n    } else {\n      return showIcon ? showIcon : /*#__PURE__*/_jsxDEV(EyeOff, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 36\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [label ? /*#__PURE__*/_jsxDEV(Label, {\n      className: \"form-label\",\n      for: htmlFor,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(InputGroup, {\n      className: classnames({\n        [className]: className,\n        'is-invalid': invalid\n      }),\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: ref,\n        invalid: invalid,\n        type: inputVisibility === false ? 'password' : 'text',\n        placeholder: placeholder ? placeholder : '············',\n        className: classnames({\n          [inputClassName]: inputClassName\n        })\n        /*eslint-disable */\n        ,\n        ...(label && htmlFor ? {\n          id: htmlFor\n        } : {}),\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroupText, {\n        className: \"cursor-pointer\",\n        onClick: () => setInputVisibility(!inputVisibility),\n        children: renderIcon()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}, \"CP4M4NpEdDJ4VcmvhtakRhTfULA=\"));\n_c2 = InputPasswordToggle;\nexport default InputPasswordToggle; // ** PropTypes\n\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present');\n    }\n  },\n\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present');\n    }\n  }\n\n}; // ** Default Props\n\nInputPasswordToggle.defaultProps = {\n  visible: false\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputPasswordToggle$forwardRef\");\n$RefreshReg$(_c2, \"InputPasswordToggle\");","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/@core/components/input-password-toggle/index.js"],"names":["Fragment","useState","forwardRef","PropTypes","classnames","Eye","EyeOff","InputGroup","Input","InputGroupText","Label","InputPasswordToggle","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","inputVisibility","setInputVisibility","renderIcon","size","id","propTypes","bool","node","string","number","propName","Error","defaultProps"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"]},"metadata":{},"sourceType":"module"}