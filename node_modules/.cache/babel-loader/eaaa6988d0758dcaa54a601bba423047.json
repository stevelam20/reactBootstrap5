{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STEVEDESKTOP\\\\Desktop\\\\themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template\\\\vuexy-admin-v8.1.0\\\\react-version\\\\Bootstrap5\\\\full-version\\\\full-version\\\\src\\\\@core\\\\components\\\\autocomplete\\\\index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport ReactDOM from 'react-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { Fragment, useEffect, useState, useRef } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { AlertCircle } from 'react-feather';\nimport PerfectScrollbar from 'react-perfect-scrollbar'; // ** Hooks Imports\n\nimport { useOnClickOutside } from '@hooks/useOnClickOutside'; // ** Styles Imports\n\nimport '@styles/base/bootstrap-extended/_include.scss';\nimport './autocomplete.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Autocomplete = props => {\n  _s();\n\n  // ** Refs\n  const container = useRef(null);\n  const inputElRef = useRef(null);\n  const suggestionsListRef = useRef(null); // ** States\n\n  const [focused, setFocused] = useState(false);\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [userInput, setUserInput] = useState(props.value ? props.value : ''); // ** Vars\n\n  const navigate = useNavigate();\n  let filteredData = []; // ** Suggestion Item Click Event\n\n  const onSuggestionItemClick = (url, e) => {\n    setActiveSuggestion(0);\n    setShowSuggestions(false);\n    setUserInput(filteredData[activeSuggestion][props.filterKey]);\n\n    if (url !== undefined && url !== null) {\n      navigate(url);\n    }\n\n    if (props.onSuggestionClick) {\n      props.onSuggestionClick(url, e);\n    }\n  }; // ** Suggestion Hover Event\n\n\n  const onSuggestionItemHover = index => {\n    setActiveSuggestion(index);\n  }; // ** Input On Change Event\n\n\n  const onChange = e => {\n    const userInput = e.currentTarget.value;\n    setActiveSuggestion(0);\n    setShowSuggestions(true);\n    setUserInput(userInput);\n\n    if (e.target.value < 1) {\n      setShowSuggestions(false);\n    }\n  }; // ** Input Click Event\n\n\n  const onInputClick = e => {\n    e.stopPropagation();\n  }; // ** Input's Keydown Event\n\n\n  const onKeyDown = e => {\n    const filterKey = props.filterKey;\n    const suggestionList = ReactDOM.findDOMNode(suggestionsListRef.current); // ** User pressed the up arrow\n\n    if (e.keyCode === 38 && activeSuggestion !== 0) {\n      setActiveSuggestion(activeSuggestion - 1);\n\n      if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion <= filteredData.length / 2) {\n        suggestionList.scrollTop = 0;\n      }\n    } else if (e.keyCode === 40 && activeSuggestion < filteredData.length - 1) {\n      // ** User pressed the down arrow\n      setActiveSuggestion(activeSuggestion + 1);\n\n      if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion >= filteredData.length / 2) {\n        suggestionList.scrollTop = suggestionList.scrollHeight;\n      }\n    } else if (e.keyCode === 27) {\n      // ** User Pressed ESC\n      setShowSuggestions(false);\n      setUserInput('');\n    } else if (e.keyCode === 13 && showSuggestions) {\n      // ** User Pressed ENTER\n      onSuggestionItemClick(filteredData[activeSuggestion].link, e);\n      setUserInput(filteredData[activeSuggestion][filterKey]);\n      setShowSuggestions(false);\n    } else {\n      return;\n    } // ** Custom Keydown Event\n\n\n    if (props.onKeyDown !== undefined && props.onKeyDown !== null) {\n      props.onKeyDown(e, userInput);\n    }\n  }; // ** Function To Render Grouped Suggestions\n\n\n  const renderGroupedSuggestion = arr => {\n    const {\n      filterKey,\n      customRender\n    } = props;\n\n    const renderSuggestion = (item, i) => {\n      if (!customRender) {\n        const suggestionURL = item.link !== undefined && item.link !== null ? item.link : null;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classnames('suggestion-item', {\n            active: filteredData.indexOf(item) === activeSuggestion\n          }),\n          onClick: e => onSuggestionItemClick(suggestionURL, e),\n          onMouseEnter: () => {\n            onSuggestionItemHover(filteredData.indexOf(item));\n          },\n          children: item[filterKey]\n        }, item[filterKey], false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this);\n      } else if (customRender) {\n        return customRender(item, i, filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n      } else {\n        return null;\n      }\n    };\n\n    return arr.map((item, i) => {\n      return renderSuggestion(item, i);\n    });\n  }; // ** Function To Render Ungrouped Suggestions\n\n\n  const renderUngroupedSuggestions = () => {\n    const {\n      filterKey,\n      suggestions,\n      customRender,\n      suggestionLimit\n    } = props;\n    filteredData = [];\n    const sortSingleData = suggestions.filter(i => {\n      const startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n            includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n      if (startCondition) {\n        return startCondition;\n      } else if (!startCondition && includeCondition) {\n        return includeCondition;\n      } else {\n        return null;\n      }\n    }).slice(0, suggestionLimit);\n    filteredData.push(...sortSingleData);\n\n    if (sortSingleData.length) {\n      return sortSingleData.map((suggestion, index) => {\n        const suggestionURL = suggestion.link !== undefined && suggestion.link !== null ? suggestion.link : null;\n\n        if (!customRender) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: classnames('suggestion-item', {\n              active: filteredData.indexOf(suggestion) === activeSuggestion\n            }),\n            onClick: e => onSuggestionItemClick(suggestionURL, e),\n            onMouseEnter: () => onSuggestionItemHover(filteredData.indexOf(suggestion)),\n            children: suggestion[filterKey]\n          }, suggestion[filterKey], false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this);\n        } else if (customRender) {\n          return customRender(suggestion, index, filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n        } else {\n          return null;\n        }\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"suggestion-item no-result\",\n        children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n          size: 15\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"align-middle ms-50\",\n          children: \"No Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this);\n    }\n  }; // ** Function To Render Suggestions\n\n\n  const renderSuggestions = () => {\n    const {\n      filterKey,\n      grouped,\n      filterHeaderKey,\n      suggestions\n    } = props; // ** Checks if suggestions are grouped or not.\n\n    if (grouped === undefined || grouped === null || !grouped) {\n      return renderUngroupedSuggestions();\n    } else {\n      filteredData = [];\n      return suggestions.map(suggestion => {\n        const sortData = suggestion.data.filter(i => {\n          const startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n                includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n          if (startCondition) {\n            return startCondition;\n          } else if (!startCondition && includeCondition) {\n            return includeCondition;\n          } else {\n            return null;\n          }\n        }).slice(0, suggestion.searchLimit);\n        filteredData.push(...sortData);\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"suggestion-item suggestion-title-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"suggestion-title\",\n              children: suggestion[filterHeaderKey]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), sortData.length ? renderGroupedSuggestion(sortData) : /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"suggestion-item no-result\",\n            children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n              size: 15\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"align-middle ms-50\",\n              children: \"No Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)]\n        }, suggestion[filterHeaderKey], true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  }; //** ComponentDidMount\n\n\n  useEffect(() => {\n    if (props.defaultSuggestions && focused) {\n      setShowSuggestions(true);\n    }\n  }, [focused, props.defaultSuggestions]); //** ComponentDidUpdate\n\n  useEffect(() => {\n    const textInput = ReactDOM.findDOMNode(inputElRef.current); // ** For searchbar focus\n\n    if (textInput !== null && props.autoFocus) {\n      inputElRef.current.focus();\n    } // ** If user has passed default suggestions & focus then show default suggestions\n\n\n    if (props.defaultSuggestions && focused) {\n      setShowSuggestions(true);\n    } // ** Function to run on user passed Clear Input\n\n\n    if (props.clearInput) {\n      props.clearInput(userInput, setUserInput);\n    } // ** Function on Suggestions Shown\n\n\n    if (props.onSuggestionsShown && showSuggestions) {\n      props.onSuggestionsShown(userInput);\n    }\n  }, [setShowSuggestions, focused, userInput, showSuggestions, props]); // ** On External Click Close The Search & Call Passed Function\n\n  useOnClickOutside(container, () => {\n    setShowSuggestions(false);\n\n    if (props.externalClick) {\n      props.externalClick();\n    }\n  });\n  let suggestionsListComponent;\n\n  if (showSuggestions) {\n    suggestionsListComponent = /*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n      className: classnames('suggestions-list', {\n        [props.wrapperClass]: props.wrapperClass\n      }),\n      ref: suggestionsListRef,\n      component: \"ul\",\n      options: {\n        wheelPropagation: false\n      },\n      children: renderSuggestions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete-container\",\n    ref: container,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        onChange(e);\n\n        if (props.onChange) {\n          props.onChange(e);\n        }\n      },\n      onKeyDown: e => onKeyDown(e),\n      value: userInput,\n      className: `autocomplete-search ${props.className ? props.className : ''}`,\n      placeholder: props.placeholder,\n      onClick: onInputClick,\n      ref: inputElRef,\n      onFocus: () => setFocused(true),\n      autoFocus: props.autoFocus,\n      onBlur: e => {\n        if (props.onBlur) props.onBlur(e);\n        setFocused(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), suggestionsListComponent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Autocomplete, \"2sKQUEEp6/P23Nl56PdIZDHHwA4=\", false, function () {\n  return [useNavigate, useOnClickOutside];\n});\n\n_c = Autocomplete;\nexport default Autocomplete; // ** PropTypes\n\nAutocomplete.propTypes = {\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  clearInput: PropTypes.func,\n  placeholder: PropTypes.string,\n  externalClick: PropTypes.func,\n  defaultValue: PropTypes.string,\n  wrapperClass: PropTypes.string,\n  filterHeaderKey: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func,\n  filterKey: PropTypes.string.isRequired,\n  suggestions: PropTypes.array.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/@core/components/autocomplete/index.js"],"names":["ReactDOM","useNavigate","Fragment","useEffect","useState","useRef","PropTypes","classnames","AlertCircle","PerfectScrollbar","useOnClickOutside","Autocomplete","props","container","inputElRef","suggestionsListRef","focused","setFocused","activeSuggestion","setActiveSuggestion","showSuggestions","setShowSuggestions","userInput","setUserInput","value","navigate","filteredData","onSuggestionItemClick","url","e","filterKey","undefined","onSuggestionClick","onSuggestionItemHover","index","onChange","currentTarget","target","onInputClick","stopPropagation","onKeyDown","suggestionList","findDOMNode","current","keyCode","length","scrollTop","scrollHeight","link","renderGroupedSuggestion","arr","customRender","renderSuggestion","item","i","suggestionURL","active","indexOf","map","renderUngroupedSuggestions","suggestions","suggestionLimit","sortSingleData","filter","startCondition","toLowerCase","startsWith","includeCondition","includes","slice","push","suggestion","renderSuggestions","grouped","filterHeaderKey","sortData","data","searchLimit","defaultSuggestions","textInput","autoFocus","focus","clearInput","onSuggestionsShown","externalClick","suggestionsListComponent","wrapperClass","wheelPropagation","className","placeholder","onBlur","propTypes","bool","func","string","defaultValue","number","isRequired","array"],"mappings":"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","sourcesContent":["// ** React Imports\nimport ReactDOM from 'react-dom'\nimport { useNavigate } from 'react-router-dom'\nimport { Fragment, useEffect, useState, useRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { AlertCircle } from 'react-feather'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// ** Hooks Imports\nimport { useOnClickOutside } from '@hooks/useOnClickOutside'\n\n// ** Styles Imports\nimport '@styles/base/bootstrap-extended/_include.scss'\nimport './autocomplete.scss'\n\nconst Autocomplete = props => {\n  // ** Refs\n  const container = useRef(null)\n  const inputElRef = useRef(null)\n  const suggestionsListRef = useRef(null)\n\n  // ** States\n  const [focused, setFocused] = useState(false)\n  const [activeSuggestion, setActiveSuggestion] = useState(0)\n  const [showSuggestions, setShowSuggestions] = useState(false)\n  const [userInput, setUserInput] = useState(props.value ? props.value : '')\n\n  // ** Vars\n  const navigate = useNavigate()\n  let filteredData = []\n\n  // ** Suggestion Item Click Event\n  const onSuggestionItemClick = (url, e) => {\n    setActiveSuggestion(0)\n    setShowSuggestions(false)\n    setUserInput(filteredData[activeSuggestion][props.filterKey])\n    if (url !== undefined && url !== null) {\n      navigate(url)\n    }\n\n    if (props.onSuggestionClick) {\n      props.onSuggestionClick(url, e)\n    }\n  }\n\n  // ** Suggestion Hover Event\n  const onSuggestionItemHover = index => {\n    setActiveSuggestion(index)\n  }\n\n  // ** Input On Change Event\n  const onChange = e => {\n    const userInput = e.currentTarget.value\n    setActiveSuggestion(0)\n    setShowSuggestions(true)\n    setUserInput(userInput)\n    if (e.target.value < 1) {\n      setShowSuggestions(false)\n    }\n  }\n\n  // ** Input Click Event\n  const onInputClick = e => {\n    e.stopPropagation()\n  }\n\n  // ** Input's Keydown Event\n  const onKeyDown = e => {\n    const filterKey = props.filterKey\n    const suggestionList = ReactDOM.findDOMNode(suggestionsListRef.current)\n\n    // ** User pressed the up arrow\n    if (e.keyCode === 38 && activeSuggestion !== 0) {\n      setActiveSuggestion(activeSuggestion - 1)\n\n      if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion <= filteredData.length / 2) {\n        suggestionList.scrollTop = 0\n      }\n    } else if (e.keyCode === 40 && activeSuggestion < filteredData.length - 1) {\n      // ** User pressed the down arrow\n      setActiveSuggestion(activeSuggestion + 1)\n\n      if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion >= filteredData.length / 2) {\n        suggestionList.scrollTop = suggestionList.scrollHeight\n      }\n    } else if (e.keyCode === 27) {\n      // ** User Pressed ESC\n      setShowSuggestions(false)\n      setUserInput('')\n    } else if (e.keyCode === 13 && showSuggestions) {\n      // ** User Pressed ENTER\n      onSuggestionItemClick(filteredData[activeSuggestion].link, e)\n      setUserInput(filteredData[activeSuggestion][filterKey])\n      setShowSuggestions(false)\n    } else {\n      return\n    }\n\n    // ** Custom Keydown Event\n    if (props.onKeyDown !== undefined && props.onKeyDown !== null) {\n      props.onKeyDown(e, userInput)\n    }\n  }\n\n  // ** Function To Render Grouped Suggestions\n  const renderGroupedSuggestion = arr => {\n    const { filterKey, customRender } = props\n\n    const renderSuggestion = (item, i) => {\n      if (!customRender) {\n        const suggestionURL = item.link !== undefined && item.link !== null ? item.link : null\n        return (\n          <li\n            className={classnames('suggestion-item', {\n              active: filteredData.indexOf(item) === activeSuggestion\n            })}\n            key={item[filterKey]}\n            onClick={e => onSuggestionItemClick(suggestionURL, e)}\n            onMouseEnter={() => {\n              onSuggestionItemHover(filteredData.indexOf(item))\n            }}\n          >\n            {item[filterKey]}\n          </li>\n        )\n      } else if (customRender) {\n        return customRender(\n          item,\n          i,\n          filteredData,\n          activeSuggestion,\n          onSuggestionItemClick,\n          onSuggestionItemHover,\n          userInput\n        )\n      } else {\n        return null\n      }\n    }\n\n    return arr.map((item, i) => {\n      return renderSuggestion(item, i)\n    })\n  }\n\n  // ** Function To Render Ungrouped Suggestions\n  const renderUngroupedSuggestions = () => {\n    const { filterKey, suggestions, customRender, suggestionLimit } = props\n\n    filteredData = []\n    const sortSingleData = suggestions\n      .filter(i => {\n        const startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n          includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase())\n        if (startCondition) {\n          return startCondition\n        } else if (!startCondition && includeCondition) {\n          return includeCondition\n        } else {\n          return null\n        }\n      })\n      .slice(0, suggestionLimit)\n    filteredData.push(...sortSingleData)\n    if (sortSingleData.length) {\n      return sortSingleData.map((suggestion, index) => {\n        const suggestionURL = suggestion.link !== undefined && suggestion.link !== null ? suggestion.link : null\n        if (!customRender) {\n          return (\n            <li\n              className={classnames('suggestion-item', {\n                active: filteredData.indexOf(suggestion) === activeSuggestion\n              })}\n              key={suggestion[filterKey]}\n              onClick={e => onSuggestionItemClick(suggestionURL, e)}\n              onMouseEnter={() => onSuggestionItemHover(filteredData.indexOf(suggestion))}\n            >\n              {suggestion[filterKey]}\n            </li>\n          )\n        } else if (customRender) {\n          return customRender(\n            suggestion,\n            index,\n            filteredData,\n            activeSuggestion,\n            onSuggestionItemClick,\n            onSuggestionItemHover,\n            userInput\n          )\n        } else {\n          return null\n        }\n      })\n    } else {\n      return (\n        <li className='suggestion-item no-result'>\n          <AlertCircle size={15} /> <span className='align-middle ms-50'>No Result</span>\n        </li>\n      )\n    }\n  }\n\n  // ** Function To Render Suggestions\n  const renderSuggestions = () => {\n    const { filterKey, grouped, filterHeaderKey, suggestions } = props\n\n    // ** Checks if suggestions are grouped or not.\n    if (grouped === undefined || grouped === null || !grouped) {\n      return renderUngroupedSuggestions()\n    } else {\n      filteredData = []\n      return suggestions.map(suggestion => {\n        const sortData = suggestion.data\n          .filter(i => {\n            const startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n              includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase())\n            if (startCondition) {\n              return startCondition\n            } else if (!startCondition && includeCondition) {\n              return includeCondition\n            } else {\n              return null\n            }\n          })\n          .slice(0, suggestion.searchLimit)\n\n        filteredData.push(...sortData)\n        return (\n          <Fragment key={suggestion[filterHeaderKey]}>\n            <li className='suggestion-item suggestion-title-wrapper'>\n              <h6 className='suggestion-title'>{suggestion[filterHeaderKey]}</h6>\n            </li>\n            {sortData.length ? (\n              renderGroupedSuggestion(sortData)\n            ) : (\n              <li className='suggestion-item no-result'>\n                <AlertCircle size={15} /> <span className='align-middle ms-50'>No Result</span>\n              </li>\n            )}\n          </Fragment>\n        )\n      })\n    }\n  }\n\n  //** ComponentDidMount\n  useEffect(() => {\n    if (props.defaultSuggestions && focused) {\n      setShowSuggestions(true)\n    }\n  }, [focused, props.defaultSuggestions])\n\n  //** ComponentDidUpdate\n  useEffect(() => {\n    const textInput = ReactDOM.findDOMNode(inputElRef.current)\n\n    // ** For searchbar focus\n    if (textInput !== null && props.autoFocus) {\n      inputElRef.current.focus()\n    }\n\n    // ** If user has passed default suggestions & focus then show default suggestions\n    if (props.defaultSuggestions && focused) {\n      setShowSuggestions(true)\n    }\n\n    // ** Function to run on user passed Clear Input\n    if (props.clearInput) {\n      props.clearInput(userInput, setUserInput)\n    }\n\n    // ** Function on Suggestions Shown\n    if (props.onSuggestionsShown && showSuggestions) {\n      props.onSuggestionsShown(userInput)\n    }\n  }, [setShowSuggestions, focused, userInput, showSuggestions, props])\n\n  // ** On External Click Close The Search & Call Passed Function\n  useOnClickOutside(container, () => {\n    setShowSuggestions(false)\n    if (props.externalClick) {\n      props.externalClick()\n    }\n  })\n\n  let suggestionsListComponent\n\n  if (showSuggestions) {\n    suggestionsListComponent = (\n      <PerfectScrollbar\n        className={classnames('suggestions-list', {\n          [props.wrapperClass]: props.wrapperClass\n        })}\n        ref={suggestionsListRef}\n        component='ul'\n        options={{ wheelPropagation: false }}\n      >\n        {renderSuggestions()}\n      </PerfectScrollbar>\n    )\n  }\n\n  return (\n    <div className='autocomplete-container' ref={container}>\n      <input\n        type='text'\n        onChange={e => {\n          onChange(e)\n          if (props.onChange) {\n            props.onChange(e)\n          }\n        }}\n        onKeyDown={e => onKeyDown(e)}\n        value={userInput}\n        className={`autocomplete-search ${props.className ? props.className : ''}`}\n        placeholder={props.placeholder}\n        onClick={onInputClick}\n        ref={inputElRef}\n        onFocus={() => setFocused(true)}\n        autoFocus={props.autoFocus}\n        onBlur={e => {\n          if (props.onBlur) props.onBlur(e)\n          setFocused(false)\n        }}\n      />\n      {suggestionsListComponent}\n    </div>\n  )\n}\n\nexport default Autocomplete\n\n// ** PropTypes\nAutocomplete.propTypes = {\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  clearInput: PropTypes.func,\n  placeholder: PropTypes.string,\n  externalClick: PropTypes.func,\n  defaultValue: PropTypes.string,\n  wrapperClass: PropTypes.string,\n  filterHeaderKey: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func,\n  filterKey: PropTypes.string.isRequired,\n  suggestions: PropTypes.array.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}