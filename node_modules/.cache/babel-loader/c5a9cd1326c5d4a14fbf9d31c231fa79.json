{"ast":null,"code":"// ** Redux Imports\nimport { createSlice } from '@reduxjs/toolkit'; // ** UseJWT import to get config\n\nimport useJwt from '@src/auth/jwt/useJwt';\nconst config = useJwt.jwtConfig;\n\nconst initialUser = () => {\n  const item = window.localStorage.getItem('userData'); //** Parse stored json or if none return initialValue\n\n  return item ? JSON.parse(item) : {};\n};\n\nexport const authSlice = createSlice({\n  name: 'authentication',\n  initialState: {\n    userData: initialUser()\n  },\n  reducers: {\n    handleLogin: (state, action) => {\n      state.userData = action.payload;\n      state[config.storageTokenKeyName] = action.payload[config.storageTokenKeyName];\n      state[config.storageRefreshTokenKeyName] = action.payload[config.storageRefreshTokenKeyName];\n      localStorage.setItem('userData', JSON.stringify(action.payload));\n      localStorage.setItem(config.storageTokenKeyName, JSON.stringify(action.payload.accessToken));\n      localStorage.setItem(config.storageRefreshTokenKeyName, JSON.stringify(action.payload.refreshToken));\n    },\n    handleLogout: state => {\n      state.userData = {};\n      state[config.storageTokenKeyName] = null;\n      state[config.storageRefreshTokenKeyName] = null; // ** Remove user, accessToken & refreshToken from localStorage\n\n      localStorage.removeItem('userData');\n      localStorage.removeItem(config.storageTokenKeyName);\n      localStorage.removeItem(config.storageRefreshTokenKeyName);\n    }\n  }\n});\nexport const {\n  handleLogin,\n  handleLogout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/redux/authentication.js"],"names":["createSlice","useJwt","config","jwtConfig","initialUser","item","window","localStorage","getItem","JSON","parse","authSlice","name","initialState","userData","reducers","handleLogin","state","action","payload","storageTokenKeyName","storageRefreshTokenKeyName","setItem","stringify","accessToken","refreshToken","handleLogout","removeItem","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,SAAtB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAb,CADwB,CAExB;;AACA,SAAOH,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsB,EAAjC;AACD,CAJD;;AAMA,OAAO,MAAMM,SAAS,GAAGX,WAAW,CAAC;AACnCY,EAAAA,IAAI,EAAE,gBAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAEV,WAAW;AADT,GAFqB;AAKnCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACH,QAAN,GAAiBI,MAAM,CAACC,OAAxB;AACAF,MAAAA,KAAK,CAACf,MAAM,CAACkB,mBAAR,CAAL,GAAoCF,MAAM,CAACC,OAAP,CAAejB,MAAM,CAACkB,mBAAtB,CAApC;AACAH,MAAAA,KAAK,CAACf,MAAM,CAACmB,0BAAR,CAAL,GAA2CH,MAAM,CAACC,OAAP,CAAejB,MAAM,CAACmB,0BAAtB,CAA3C;AACAd,MAAAA,YAAY,CAACe,OAAb,CAAqB,UAArB,EAAiCb,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAtB,CAAjC;AACAZ,MAAAA,YAAY,CAACe,OAAb,CAAqBpB,MAAM,CAACkB,mBAA5B,EAAiDX,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAP,CAAeK,WAA9B,CAAjD;AACAjB,MAAAA,YAAY,CAACe,OAAb,CAAqBpB,MAAM,CAACmB,0BAA5B,EAAwDZ,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAP,CAAeM,YAA9B,CAAxD;AACD,KARO;AASRC,IAAAA,YAAY,EAAET,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACH,QAAN,GAAiB,EAAjB;AACAG,MAAAA,KAAK,CAACf,MAAM,CAACkB,mBAAR,CAAL,GAAoC,IAApC;AACAH,MAAAA,KAAK,CAACf,MAAM,CAACmB,0BAAR,CAAL,GAA2C,IAA3C,CAHqB,CAIrB;;AACAd,MAAAA,YAAY,CAACoB,UAAb,CAAwB,UAAxB;AACApB,MAAAA,YAAY,CAACoB,UAAb,CAAwBzB,MAAM,CAACkB,mBAA/B;AACAb,MAAAA,YAAY,CAACoB,UAAb,CAAwBzB,MAAM,CAACmB,0BAA/B;AACD;AAjBO;AALyB,CAAD,CAA7B;AA0BP,OAAO,MAAM;AAAEL,EAAAA,WAAF;AAAeU,EAAAA;AAAf,IAAgCf,SAAS,CAACiB,OAAhD;AAEP,eAAejB,SAAS,CAACkB,OAAzB","sourcesContent":["// ** Redux Imports\nimport { createSlice } from '@reduxjs/toolkit'\n\n// ** UseJWT import to get config\nimport useJwt from '@src/auth/jwt/useJwt'\n\nconst config = useJwt.jwtConfig\n\nconst initialUser = () => {\n  const item = window.localStorage.getItem('userData')\n  //** Parse stored json or if none return initialValue\n  return item ? JSON.parse(item) : {}\n}\n\nexport const authSlice = createSlice({\n  name: 'authentication',\n  initialState: {\n    userData: initialUser()\n  },\n  reducers: {\n    handleLogin: (state, action) => {\n      state.userData = action.payload\n      state[config.storageTokenKeyName] = action.payload[config.storageTokenKeyName]\n      state[config.storageRefreshTokenKeyName] = action.payload[config.storageRefreshTokenKeyName]\n      localStorage.setItem('userData', JSON.stringify(action.payload))\n      localStorage.setItem(config.storageTokenKeyName, JSON.stringify(action.payload.accessToken))\n      localStorage.setItem(config.storageRefreshTokenKeyName, JSON.stringify(action.payload.refreshToken))\n    },\n    handleLogout: state => {\n      state.userData = {}\n      state[config.storageTokenKeyName] = null\n      state[config.storageRefreshTokenKeyName] = null\n      // ** Remove user, accessToken & refreshToken from localStorage\n      localStorage.removeItem('userData')\n      localStorage.removeItem(config.storageTokenKeyName)\n      localStorage.removeItem(config.storageRefreshTokenKeyName)\n    }\n  }\n})\n\nexport const { handleLogin, handleLogout } = authSlice.actions\n\nexport default authSlice.reducer\n"]},"metadata":{},"sourceType":"module"}