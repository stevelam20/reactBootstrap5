{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STEVEDESKTOP\\\\Desktop\\\\themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template\\\\vuexy-admin-v8.1.0\\\\react-version\\\\Bootstrap5\\\\full-version\\\\full-version\\\\src\\\\views\\\\components\\\\accordion\\\\AccordionControlled.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { useState } from 'react'; // ** Reactstrap Imports\n\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccordionControlled = () => {\n  _s();\n\n  // ** State\n  const [open, setOpen] = useState('1');\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    open: open,\n    toggle: toggle,\n    children: [/*#__PURE__*/_jsxDEV(AccordionItem, {\n      children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n        targetId: \"1\",\n        children: \"Accordion Item 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n        accordionId: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"This is the first item's accordion body.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), \" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<AccordionBody>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), \", though the transition does limit overflow.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccordionItem, {\n      children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n        targetId: \"2\",\n        children: \"Accordion Item 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n        accordionId: \"2\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"This is the second item's accordion body.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), \" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<AccordionBody>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), \", though the transition does limit overflow.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccordionItem, {\n      children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n        targetId: \"3\",\n        children: \"Accordion Item 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n        accordionId: \"3\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"This is the third item's accordion body.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), \" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<AccordionBody>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), \", though the transition does limit overflow.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccordionControlled, \"xAIfVgvFJ6GAJ9vUUusRBV+vZ1E=\");\n\n_c = AccordionControlled;\nexport default AccordionControlled;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccordionControlled\");","map":{"version":3,"sources":["C:/Users/STEVEDESKTOP/Desktop/themeforest-5lg3m8tG-vuexy-vuejs-html-laravel-admin-dashboard-template/vuexy-admin-v8.1.0/react-version/Bootstrap5/full-version/full-version/src/views/components/accordion/AccordionControlled.js"],"names":["useState","Accordion","AccordionBody","AccordionHeader","AccordionItem","AccordionControlled","open","setOpen","toggle","id"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,eAAnC,EAAoDC,aAApD,QAAyE,YAAzE;;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,GAAD,CAAhC;;AAEA,QAAMQ,MAAM,GAAGC,EAAE,IAAI;AACnBH,IAAAA,IAAI,KAAKG,EAAT,GAAcF,OAAO,EAArB,GAA0BA,OAAO,CAACE,EAAD,CAAjC;AACD,GAFD;;AAIA,sBACE,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEH,IAAjB;AAAuB,IAAA,MAAM,EAAEE,MAA/B;AAAA,4BACE,QAAC,aAAD;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,WAAW,EAAC,GAA3B;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,wJAEsG,GAFtG,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,aAAD;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,WAAW,EAAC,GAA3B;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,wJAEsG,GAFtG,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAiBE,QAAC,aAAD;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,WAAW,EAAC,GAA3B;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,wJAEsG,GAFtG,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CApCD;;GAAMH,mB;;KAAAA,mB;AAsCN,eAAeA,mBAAf","sourcesContent":["// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionControlled = () => {\n  // ** State\n  const [open, setOpen] = useState('1')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default AccordionControlled\n"]},"metadata":{},"sourceType":"module"}